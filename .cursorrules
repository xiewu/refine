## Default Workflow

1. **Sequential Thinking**  
   Begin every session by mapping out the steps and identifying required tools.
2. **context7:**
   - Fetch latest docs & examples
3. **Browser Tools**
   - Observe real-time app behavior on browser.

## Tool Usage Guidelines

1. **Sequential Thinking**  
   - For any multi‑step or research task, first map out the logical steps, then execute them in order.

2. **context7**  
   - Always consult this tool for the latest documentation and examples.

3. **Browser DevTools**  
   - Actively use Inspector, Network, and Console panels to:  
     - Monitor real‑time app behavior  
     - Debug UI and network issues  
     - Analyze console errors and performance metrics  
     - Verify pixel‑perfect alignment with design specs  
 

## Code Style & Structure

- **Language:** TypeScript, strict mode, avoid `any`.
- **Components:** Functional + hooks; no class components or `render` functions.
- **Modularity:** Group by feature—components, hooks, styles together.
- **Types:** Use `type` over `interface` for declarations.

## Naming Conventions

- **Variables & functions:** `camelCase` (e.g., `fetchUserData`)
- **Components:** `PascalCase` (e.g., `UserProfile`)
- **Directories:** lowercase, hyphen‑separated (e.g., `user-profile`)

## Performance

- Minimize `useEffect`/`useState` in renders.
- Wrap static‑prop components in `React.memo()`.
- Optimize FlatLists with `removeClippedSubviews`, `maxToRenderPerBatch`, `windowSize`, and `getItemLayout`.
- Avoid inline/anonymous functions in render paths.

## UI & Styling

- Use `Tailwind` via `shadcn/ui`.
- Ensure responsive layouts for all screen sizes and orientations.
- Optimize images with an RN‑friendly library (e.g., `expo-image`).
- Alwaus use colors from tailwind.config.ts or global.css
- Always use `cn` from `~/utils/cn.ts` for `className`—one class per line:
  ```ts
  cn("text-sm", "text-muted-foreground", "justify-center");
  ```
- Conditional classes example:
  ```ts
  cn("px-4 py-2", {
    "bg-green-500": isSuccess,
    "bg-red-500": isError,
  });
  ```

## Best Practices

- Align with React Native’s threading for smooth UI.
- Leverage **Expo EAS** for builds & OTA updates.
- Use **React Navigation** for routing & deep linking.
- Share common UI/hooks via `~/components/ui`.


## Project Layout

```
/app           — Routes
/components
  /ui          — react‑native‑reusables
/lib           — Shared utils (cn, icon helpers)
/types         — TS definitions
/utils         — Helper functions
/public        — Static assets
```
